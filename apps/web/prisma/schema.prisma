generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  firstName     String?
  lastName      String?
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  location      String?
  title         String?
  description   String?
  accounts      Account[]
  sessions      Session[]

  created DateTime @default(now())
  updated DateTime @default(now())
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
}

model ShareProjectFormSubmission {
  id          String       @id @db.Uuid
  reference   String       @unique
  name        String
  quality     String
  email       String
  phone       String?
  domain      String
  solution    String
  description String
  dates       String
  partners    String
  tech        String
  attachments Attachment[]
  created     DateTime     @default(now())
  community   Community    @relation(fields: [communityId], references: [id])
  communityId String
}

model Community {
  id                 String                       @id
  name               String
  text               String
  scale              String
  zipcodes           String[]
  projectSubmissions ShareProjectFormSubmission[]
}

model Attachment {
  key                 String                     @id
  type                String
  name                String
  created             DateTime                   @default(now())
  projectSubmissionId String                     @db.Uuid
  projectSubmission   ShareProjectFormSubmission @relation(fields: [projectSubmissionId], references: [id])
}

model Project {
  id String @id @default(uuid()) @db.Uuid

  // If imported from grist (maybe we'll have other sources of projects)
  gristId Int? @unique

  // If showcase is set, the project will appear on home page shocases, ordered by showcase integer value
  showcase                Int?

  coverImage              String
  coverImageAlt           String?
  slug                    String    @unique
  localActorQuotes        Quote[]   @relation(name: "local_actor_quotes")
  partnerQuotes           Quote[]   @relation(name: "partner_quotes")
  district                String?
  city                    String?
  title                   String
  subtitle                String
  localization            String
  localizationDescription String?
  goals                   String[]
  characteristics         String[]
  description             String
  budget                  Float?
  funding                 String?
  inaugurationDate        DateTime?

  latitude         Float?
  longitude        Float?
  program          String?
  categories       String[]

  createdBy String?
  created   DateTime @default(now())
  updatedBy String?
  updated   DateTime @default(now())
}

model Quote {
  id String @id @default(uuid()) @db.Uuid

  localQuoteForId String?  @db.Uuid
  localQuoteFor   Project? @relation(name: "local_actor_quotes", fields: [localQuoteForId], references: [id])

  partnerQuoteForId String?  @db.Uuid
  partnerQuoteFor   Project? @relation(name: "partner_quotes", fields: [partnerQuoteForId], references: [id])

  order   Int
  by      String
  content String
  image   String
}
